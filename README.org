#+title: semantic-release
#+subtitle: Automated version handling for repos & monorepos
#+author: Bj√∂rn Erlwein

[[https://semver.org/][Semantic Versioning]] is difficult for a lot of people and somewhat error prone. This automates the process, given the commit messages follow a certain template (see below), allowing automation of the process in a pipeline or something.

* Supported project types
- Cargo (Cargo.toml)
- NPM (package.json)

* Is this ready for general use

Most likely not, I'd recommend [[https://github.com/semantic-release/semantic-release][semantic-release/semantic-release]] for most people. My tool works fine for my use cases but I can't speak for anything else.
Might work well, might delete everything you love and cherish, be careful.

* The commit template

This is somewhat based on the [[https://github.com/angular/angular/blob/main/CONTRIBUTING.md#-commit-message-format][Angular Commit Message Format]] but not as extensive.

Every commit that counts towards a new release should have a summary starting with something like this:

#+begin_src
<type>(<scope>): <summary>
#+end_src

The ~type~ field is mandatory, ~scope~ is optional. ~summary~ is where the usual commit message would go. The ~scope~ field doesn't really have a semantic purpose but may be used to categorize commits
into certain features/parts of the project.

Supported values for ~type~ are:

- *feat*: Marks a new feature or general improvement, this will lead to a bump in the ~MINOR~ version
- *fix*: A bug fix, this will lead to a bump in the ~PATCH~ version

Breaking changes can be marked by putting the String ~BREAKING CHANGE:~ somewhere in the commit message body. This will override whatever ~type~ was given and lead to a bump in the ~MAJOR~ version

* How do I use this

#+begin_src sh :results output code
cargo run -- --help
#+end_src

#+RESULTS:
#+begin_src sh
Usage: semantic-release [OPTIONS] <CONFIG>

Arguments:
  <CONFIG>

Options:
  -v, --verbose...  Log debug infos, may be passed more than once to increase log level
  -d, --dry         Don't actually change any files or do git commits/tags
      --init        Create a config file at the given path instead of doing any semantic releasing
  -h, --help        Print help
#+end_src

** Getting started

semantic-release provides the =--init= option to generate a template config file at the given location. Use it like this:

#+begin_src sh
semantic-release --init path/to/project.toml
#+end_src

The config file can be placed wherever you like. I suggest the root of the git repo.

The generated file will look like this:

#+begin_src sh :results code :wrap src toml
cat ./src/init/project.toml
#+end_src

#+RESULTS:
#+begin_src toml
# this should be a directory inside of the repo where the package is located
# if this isn't a monorepo you can simply put . here
# no need to put a ./ before a path, it is relative by default
subpath = "."

# tags will be built by appending the version number to whatever the tagprefix is
# if this is set to "wow-a-prefix-" (note the trailing -) and the version is "1.2.3"
# then the final tag will be "wow-a-prefix-1.2.3"
# leave this empty to have no prefix at all here
tagprefix = ""

# the files array indicates files inside of the subpath that should be handled by the tool
[[files]]
# every entry needs three components:
#
# path indicates the path to the file relative to "subpath" (but, again, without a leading ./)
path = "package.json"
# the file at "path" will be parsed into an object, the key indicates where the version string should be written to
# for a typical package.json this would be "version"
# for a Cargo.toml this would be "package.version"
key = "version"
# the type tells the tool how to parse the file.
# Currently supported values are "json" and "toml"
type = "json"

# you can specify multiple files if desired
[[files]]
path = "Cargo.toml"
key = "package.version"
type = "toml"
#+end_src

** Monorepo

You can easily support a monorepo by creating multiple config files that point at the different subprojects.

* TODOs

- give better feedback to the user

* Maybe planned features

- Write a Changelog file. This might be better handled by an additional tool.
- prebuilt binaries

* Not happening here

- git push. This would disable the ability to amend the commit with whatever the CI/CD process needs to do
- Publish to NPM/Cargo/Maven/Whatever
- Dependent package support (~b~ depends on ~a~ so a bump for ~a~ should also update & bump ~b~) for monorepos
- prebuilt mac binaries. I don't have a device for that
